Last month
P
ZMIENIAMY RAZEM 3 LINIJKE
Apr 28
C
array.c
No recorded activity before April 28, 2015
2
#include<stdio.h>
#include<stdlib.h>


void zliczam_najwieksze_xy_i_ustawiam_row_col(FILE* dane_wejsc, struct array *matrix)
{
    int i,dana;
    i=0;
    matrix->row=0;
    matrix->col=0;
    
    while(fscanf(dane_wejsc, "%d", &dana)!=EOF){ 
         if(i%2==0){
            if(dana > matrix->row) matrix->row=dana;  
         }
         if(i%2!=0){
            if(dana > matrix->col) matrix->col=dana; 
         }
         i++;
    }

matrix->col = matrix->col + 10; 
matrix->row = matrix->row + 10; 
//printf("row: %d col: %d", matrix->row, matrix->col);
}




void create_matrix_zero(struct array *matrix) //|| Dziala, sprawdzone||ilosc kolumn i wierszy, czyli dl wiersza i kolumny|| Dziala, sprawdzone
{
    int i;
  
    matrix->head=(int**) calloc((matrix->row) , sizeof(int*)); //alokuje pamiec dla tablicy wskaznikow. +2 zeby zrobic zerowa ramke
    if(matrix->head==NULL)
    {
      printf("\nNie udalo sie przydzielic pamieci(f:cr_mtrx:rzedy)\n");
      return;
    }
  
    for(i=0; i<(matrix->row); i++)
   {
        *((matrix->head)+i)=(int*) calloc((matrix->col) , sizeof(int)); // *tab wyciagam pierwszy element czyli wskaznik na wiersz
        if(*(matrix->head)==NULL)
            {
             printf("\nNie udalo sie przydzielic pamieci(f:ct_mtrx: kolumny)\n");
             return;
            }
   }
}




void resize_matrix_zero(struct array *matrix, int add_row, int add_col) //|| Dziala, sprawdzone||
{
    int i,j;
    int** tab_temp;
   
    tab_temp=(int**) calloc((matrix->row + add_row) , sizeof(int*));//alokacja pamieci dla tab tymczasowej, o add(=1) wiekszej od wczesniejszej
    if(tab_temp==NULL)
    {
      printf("\nNie udalo sie przydzielic pamieci(f:res_mtrx: rzedy)\n");
      return;
    }
    
    for(i=0; i<(matrix->row + add_row); i++) //przydzielam pamiec
    {
        *(tab_temp+i)=(int*) calloc((matrix->col + add_col) , sizeof(int));
        if( *(tab_temp+i)==NULL)
        {
            printf("\nNie udalo sie przydzielic pamieci(f:res_mtrx: kolumny)\n");
            return;
        }
    }
        
   
    for(i=0; i<(matrix->row); i++)//przepisuje wszsytko ze struktury do nowej tablicy o 1 wiekszej
    {   
        for(j=0; j<(matrix->col); j++)
        {
            tab_temp[i][j]=matrix->head[i][j];
        }
    }
    
    for(i=0; i<(matrix->row); i++)//zwalniam inty w kazdej z kolei komorce w tab wskanizkow
    {
        free(*(matrix->head + i));
    }
    free(matrix->head); //zwalniam tablice wskazkow
    
    matrix->head = tab_temp;
    matrix->row+=add_row;
    matrix->col+=add_col;

    
}


int whatelement(struct array matrix, int x, int y) //|| Dziala, sprawdzone||podaje wartosc (x,y)-tego el. tablicy
{
    if( x>=matrix.row || y>=matrix.col )
    {
     printf("\nWpisales za duze x lub y, tablica nie jest tak wielka.\n");
     return;
    }
     
    return matrix.head[x][y];
}
    
int insert_element(struct array *matrix, int x, int y,int element)  //|| Dziala, sprawdzone||wk?adaj?ca element na dan? pozycj? w tablicy,
    {
        if( x>=(matrix->row) || y>=(matrix->col) )
            {
             printf("\nWpisales za duze x lub y, tablica nie jest tak wielka.\n");
             return -1;
            }
            
        /*if(element!=0 && element!=1)
        {
            printf("Wpisales zly element, dostepne: 0, 1.");
            return; 
        }*/
           // matrix->head[x][y]=element;
            *(*(matrix->head+x)+y)=element;
            return 0;
    }
    
void delete_matrix(struct array* matrix) //|| Dziala, sprawdzone||usuwaj?ca tablic? dynamiczn? || *matrix, zebym mogl zmienic matrix.head na NULL'a. *matrix.head+i-'e dalo sie zmienic, bo po wskaznikach.
    {   
        int i;
        
        if(matrix->head==NULL)                   //CZY NIE NULL?
         {
            printf("\nHead jest ustawiony na NULL.Co ja ci tu usune?\n");  
            return;
         }
         
        for(i=0; i<matrix->row; i++)
        {
            if(*(matrix->head+i)==NULL)                          //czy nie null?
            {
                printf("\nWiersz nr %d (num. od 0) jest ustawiony na NULL.Co ja Ci tu usune?\n.",i);
                return;
            }
               
            free(*(matrix->head+i));      //matrix.head[i]  *(tab+i)=tab[i] no.
            *(matrix->head+i)=NULL; //ustawiam wszystkie na nulla, zeby w razie wypisania NULLowej tablicy, funkcja wypisujaca mogla wyrzucic, ze tab nie istenieje[lub cokolwiek innego co jej nakaze, haha!]
        }
        free(matrix->head);
        matrix->head=NULL;
    }
    
void write_matrix(struct array matrix)//|| Dziala, sprawdzone||
{
    int i,j;
    
    printf("\n");
    if(matrix.head==NULL)
    {
        printf("\nHead jest ustawiony na NULL.Nie wypisuje\n");  
        return;
    }
    for(i=0; i<matrix.row; i++)
    {
        if(*(matrix.head+i)==NULL)
        {
            printf("\nWiersz nr %d (num. od 0) jest ustawiony na NULL.Nie wypisuje dalej.\n",i);
            return;
        }
       
        for(j=0; j<matrix.col; j++)
        {
            if(matrix.head[i][j]==1) printf("*");                                               // UWAGA !!! TE 2 LINIE SPECJALNIE DO GRY W ZYCIE! WYWALIC POTEM!
            if(matrix.head[i][j]==0) printf(" ");
         // printf("%d",matrix.head[i][j]);
        }
        printf("\n");
    }
    //printf("\n");
}
 
