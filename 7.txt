Last month
P
Youuploaded an item
Apr 1
C++
List.cpp
No recorded activity before April 1, 2015

//by zygmunt ®
#include "List.h"

List::List()
{
	head = NULL;
	counter = 0;
}

List::~List()
{
	while (counter) popFront();
}

void List::pushFront()
{
	if (head == NULL && counter==0)
	{
		head = new Node;
		if (head == NULL) throw bad_alloc();
		
		head->item = addItem();
		head->prev = head;
		head->next = head;

		counter++;
		return;
	}

	else
	{
		Node* newNode = new Node;
		if (newNode == NULL) throw bad_alloc();
		newNode->item = addItem();
		newNode->next = head;
		newNode->prev = head->prev;

		head->prev->next = newNode;
		head->prev = newNode;

		head = newNode;
		counter++;
		return;
	}
}

void List::pushBack()
{
	if (head == NULL || counter == 0)
	{
		head = new Node;
		if (head == NULL) throw bad_alloc();

		head->item = addItem();
		head->prev = head;
		head->next = head;

		counter++;
		return;
	}

	else
	{
		Node* newNode = new Node;
		if (newNode == NULL) throw bad_alloc();

		newNode->item = addItem();
		newNode->prev = head->prev;
		newNode->next = head;

		head->next->prev = newNode;
		head->next = newNode;

		counter++;
		return;
	}
}

void List::insertAfter(string key_word) 
{
	Node* temp = searchList(key_word);
	if (temp == NULL) return;

	if (temp->next == head) {
		pushBack();
		return;
	}
	
	Node* newNode = new Node;
	if (newNode == NULL) throw bad_alloc();

	newNode->item = addItem();
	newNode->prev = temp;
	newNode->next = temp->next;
	counter++;
	temp->next = newNode;
	temp->next->prev = newNode;
}

/*void List::insertBefore(string key_word)
{
	Node *temp = searchList(key_word);
	if (temp == NULL) return;

	if (temp == head) {
		pushFront();
		return;
	}

	Node* newNode = new Node;
	if (newNode == NULL) throw bad_alloc();

	newNode->item = addItem();
	newNode->prev = temp->prev;
	newNode->next = temp;
	counter++;
	temp->prev = newNode;
	temp->prev->next = newNode;
}*/

void List::popFront()
{
	if(counter) remove(head);
}

void List::popBack()
{
	if (isEmpty()) return;

	Node* temp = head->prev;

	head->prev = temp->prev;
	temp->prev->next = head;

	delete temp;
	counter--;

	if (counter == 0) head = NULL;
	cout << "Poprawne usuniecie elementu" << endl;

}

void List::remove(Node* temp) 
{
	if (isEmpty()) {
		cout << "Lista jest pusta" << endl;
		return;
	}
	
	if (temp == NULL) return;
	counter--;
	
	temp->next->prev = temp->prev;
	temp->prev->next = temp->next;

	if (temp == head) head = head->next;

	delete temp;

	if (counter == 0) head = NULL;
	cout << "Poprawne usuniecie elementu" << endl;
}

Node* List::searchList(string key_word)
{
	if (isEmpty()){
		cout << "Lista jest pusta" << endl;
		return NULL;
	}

	Node* temp = head;
	do
	{
		if (temp->item == key_word) return temp;
		temp = temp->next;
	} while (temp != head);

	cout << "Brak elementu na liscie" << endl;
	return NULL;

} 

bool List::isEmpty()
{
	if (counter == 0) return true;
	else return false;
}

void List::printList()
{
	int position = 1;
	Node* ptr = head;
	do{
		cout << position << ". " << ptr->item << endl;
		position++;
		ptr = ptr->next;

	} while (position<=counter);
}

void List::top()
{
	cout << head->item << endl;
}

void List::back()
{
	if (counter == 1) cout << head->item << endl;
	else cout << head->prev->item << endl;
}

void List::size()
{
	cout << "Rozmiar listy to:" << counter << endl;
}

string addItem()
{
	cout << "Wpisz napis, ktory chcesz dodac" << endl;
	string add;
	cin >> add;
	return add;
}

